#! /bin/bash

INTERNAL_MONITOR="eDP-1"
# Finding the last connected monitor for single monitor setup
EXTERNAL_MONITOR="$(xrandr | grep " connected " | awk '{ print $1 }' | tail -n 1)"

LID_STATUS=$(cat /proc/acpi/button/lid/LID0/state | awk '{print $2}')

connected_monitors=$(xrandr | grep " connected" | awk '{print $1}')
for monitor in $connected_monitors; do
  xrandr --output "$monitor" --off
done


# Docked, lid is closed and external monitor is connected
if xrandr -q | grep "${EXTERNAL_MONITOR} connected" && [ "$LID_STATUS" = 'closed' ]; then
    xrandr --output "$EXTERNAL_MONITOR" --primary --auto
    bspc monitor "$EXTERNAL_MONITOR" -d chat term web music code notes 
    bspc wm -O "$EXTERNAL_MONITOR"

    # This fixes an issue with resolutions where windows dont fill the screen
    # https://github.com/baskerville/bspwm/issues/893#issuecomment-1331689623
    bspc config bottom_padding 0
    bspc config right_padding 0
elif $EXTERNAL_MONITOR != $INTERNAL_MONITOR && [ "$LID_STATUS" = 'open' ]; then
    xrandr --output "$INTERNAL_MONITOR" --primary --mode 1920x1080 --rotate normal
    xrandr --output "$EXTERNAL_MONITOR" --mode 1920x1080 --rotate normal --right-of "$INTERNAL_MONITOR"
    bspc monitor "$INTERNAL_MONITOR" -d chat term web 
    bspc monitor "$EXTERNAL_MONITOR" -d music code notes
    bspc wm -O "$INTERNAL_MONITOR" "$EXTERNAL_MONITOR"
else
    ~/.config/bspwm/singleLaptop.sh
fi

# Startups
setxkbmap us 
pgrep -x sxhkd > /dev/null || sxhkd &
$HOME/.config/polybar/launch.sh 2>~/polylog &
picom --experimental-backends -b #000000 &
dunst &
feh --bg-scale ~/wallpapers/ocean.jpg
/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
~/.config/bspwm/delayXmodmap.sh &

# Only run once
pgrep -f ~/.config/bspwm/pollLidClose.sh || ~/.config/bspwm/pollLidClose.sh &


bspc config window_gap          10

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true

# Get correct padding from polybar
bspc config top_padding 40px
bspc config ignore_ewmh_struts true


bspc config focused_border_color "#ebbcba"
bspc config normal_border_color "#6e6a86"
bspc config border_width         2

window_classes=("scpad" "chatgpt" "wikipad")

for class_name in "${window_classes[@]}"; do
    bspc rule -a "$class_name" sticky=on state=floating rectangle=1500x800+0+0 center=true
done

bspc rule -a colemak sticky=on focus=false state=floating rectangle=500x200+0+0
bspc rule -a symbol sticky=on state=floating focus=false rectangle=500x200+0+1000


# Init slack
bspc rule -a Slack desktop=chat follow=on focus=on
pgrep -f slack || slack &

# Init spotify
bspc rule -a ncspot desktop=music 
pgrep -f ncspot || kitty --class ncspot -e ncspot &

# Init tmux
pgrep -f tmux || kitty --class tmux -e tmux &
bspc rule -a tmux desktop=term 

# Workaround for electron and chromium window focusing bug
# See link for more info: https://github.com/baskerville/bspwm/issues/811

# include problematic window class names here (case insensitive)
classes=("chromium" "discord" "Slack")

bspc subscribe desktop_focus node_transfer | while read -r _; do
  #echo "Desktop changed -------"

  # iterate over all window IDs
  for wid in $(bspc query -N -n .window); do
    wm_class="$(xprop WM_CLASS -id "$wid")"

    # check if WM_CLASS matches any of the class names
    for class in "${classes[@]}"; do
      if grep -qi "$class" <<< "$wm_class" ; then
        # hide or unhide the given window
        if bspc query -N -d .active -n "$wid">/dev/null; then
          #echo "$class: showing"
          bspc node "$wid" -g hidden=false
        else
          #echo "$class: hiding"
          bspc node "$wid" -g hidden=true
        fi

        break
      fi
    done
  done

  # make sure the currently focused desktop becomes the previously focused
  # desktop when switching
  bspc desktop --focus
done

